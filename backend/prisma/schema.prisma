// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  intraId          String         @unique
  fullname         String
  login            String         @unique
  email            String         @unique
  Avatar           String?
  password         String?
  won              Int            @default(0)
  lost             Int            @default(0)
  winrate          Float          @default(0)
  isRegistred      Boolean        @default(false)
  isTfaEnabled     Boolean        @default(false)
  Achievements     String[]
  status           Status         @default(ONLINE)
  tfa              Tfa?
  friends          Friend[]       @relation("userFriends")
  user             Friend[]       @relation("friendsUser")
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt
  wonMatches       MatchHistory[] @relation("userWins")
  lostMatches      MatchHistory[] @relation("userLosses")
  MemberShip       MemberShip[]
  PrivateRoom      PrivateRoom?   @relation(fields: [privateRoomId], references: [id])
  privateRoomId    Int?
  sentMessages     Message[]      @relation("SentMessages")
  receivedMessages Message[]      @relation("ReceivedMessages")
}

model MemberShip {
  memberId      String    @id @unique
  intraId       String
  channelId     String
  channelName   String
  Avatar        String    @default("")
  login         String    @default("")
  isOwner       Boolean   @default(false)
  isModerator   Boolean   @default(false)
  isBanned      Boolean   @default(false)
  isMuted       Boolean   @default(false)
  mutedTime     DateTime?
  joined_at     DateTime  @default(now())
  onInviteState Boolean   @default(false)
  channel       Channel   @relation("channelMember", fields: [channelName], references: [name])
  user          User      @relation(fields: [intraId], references: [intraId])
}
model MatchHistory {
  id          Int      @id @default(autoincrement())
  winner      User?    @relation(name: "userWins", fields: [winnerId], references: [intraId])
  winnerId    String? // Made nullable
  loser       User?    @relation(name: "userLosses", fields: [loserId], references: [intraId])
  loserId     String? // Made nullable
  score       String   @default("00")
  user1Avatar String   @default("")
  user2Avatar String   @default("")
  user1Login  String   @default("")
  user2Login  String   @default("")
  matchDate   DateTime @default(now())

  @@unique([winnerId, loserId, matchDate], name: "unique_match")
}

model Channel {
  id          String           @id @default(uuid())
  name        String           @unique
  type        String           @default("")
  ownerId     String
  password    String           @default("")
  members     MemberShip[]     @relation("channelMember")
  description String?
  messages    ChannelMessage[]
}


model ChannelMessage {
  id          Int      @id @default(autoincrement())
  channelId   String
  channelName String
  sender      String
  Avatar      String?
  content     String
  createdAt   DateTime @default(now())
  senderUser  Channel  @relation(fields: [channelName], references: [name])
}

model Message {
  id              Int         @id @default(autoincrement())
  sender          String
  recipient       String
  content         String
  createdAt       DateTime    @default(now())
  senderUser      User        @relation("SentMessages", fields: [sender], references: [intraId])
  recipientUser   User        @relation("ReceivedMessages", fields: [recipient], references: [intraId])
  PrivateRoomName String
  PrivateRoom     PrivateRoom @relation(fields: [PrivateRoomName], references: [name])
}

model PrivateRoom {
  id              Int       @id @default(autoincrement())
  name            String    @unique
  participantsIds String[]
  participants    User[]
  messages        Message[]
  createdAt       DateTime  @default(now())
  updated_at      DateTime  @updatedAt
}

model Tfa {
  user       User     @relation(fields: [intraId], references: [intraId])
  intraId    String   @unique
  otp        String   @unique
  created_at DateTime @default(now())
}

enum Status {
  ONLINE
  OFFLINE
  INGAME
}

enum FriendStatus {
  PENDING
  ACCEPTED
  BLOCKED
}

model Friend {
  friendshipStatus FriendStatus
  user             User         @relation("userFriends", fields: [userId], references: [intraId])
  userId           String
  friend           User         @relation("friendsUser", fields: [friendId], references: [intraId])
  friendId         String
  created_at       DateTime     @default(now())

  @@unique([userId, friendId], name: "unique_user_friend")
}
